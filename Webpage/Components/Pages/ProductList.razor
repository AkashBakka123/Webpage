@page "/Productlist"
@inherits LayoutComponentBase
@rendermode InteractiveServer
@inject Class.ProductService ProductService

<h3>Vegetable Sales Page</h3>

<!-- Product Grid -->
<div class="product-grid">
    @if (ProductService.Products.Any())
    {
        @foreach (var product in ProductService.Products)
        {
            <div class="product">
                <dev class="index"><h4>@product.IndexValue</h4> </dev>
                <img src="@product.ImageUrl" alt="@product.Name">
                <h4>@product.Name</h4>
                <p>Original price: ₹@product.Price</p>
                <p>Discount price: ₹@product.DiscountPrice</p>
                <button class="btn btn-warning" @onclick="() => OpenEditProductModal(product)">Edit</button>
                <button class="btn btn-danger" @onclick="() => DeleteProduct(product)">Delete</button>  <!-- Add Delete Button -->
            </div>
        }
    }
    else
    {
        <p>No products available. Add some products first!</p>
    }
</div>

<!-- Edit Product Modal -->
@if (isEditModalOpen)
{
    <div class="modal" style="display:block;">
        <div class="modal-content">
            <span class="close" @onclick="CloseEditModal">&times;</span>
            <h3>Edit Product</h3>
            <form @onsubmit="UpdateProduct">
                <div class="form-group">
                    <label for="productName">Name:</label>
                    <input type="text" id="productName" class="form-control" @bind="productToEdit.Name" />
                </div>
                <div class="form-group">
                    <label for="productPrice">Original Price:</label>
                    <input type="number" id="productPrice" class="form-control" @bind="productToEdit.Price" />
                </div>
                <div class="form-group">
                    <label for="productPrice">Discount Price:</label>
                    <input type="number" id="productPrice" class="form-control" @bind="productToEdit.DiscountPrice" />
                </div>
                <div class="form-group">
                    <label for="productPrice">Discount Percentage:</label>
                    <input type="number" id="productPrice" class="form-control" @bind="productToEdit.DiscountPrecentage" />
                </div>
                <div class="form-group">
                    <label for="productImageUrl">Image URL:</label>
                    <input type="text" id="productImageUrl" class="form-control" @bind="productToEdit.ImageUrl" />
                </div>
                <div class="form-group">
                    <label for="productImageUrl">Index Value:</label>
                    <input type="text" id="productImageUrl" class="form-control" @bind="productToEdit.IndexValue" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
            </form>
        </div>
    </div>
}

<style>

    .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    padding: 20px;
    }

    .product {
    background-color: white;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    text-align: center;
    transition: transform 0.2s ease-in-out;
    }

    .index {

    text-align: left;
    }

    .product:hover {
    transform: translateY(-5px);
    }

    .product img {
    max-width: 100%;
    height: 150px;
    object-fit: cover;
    border-radius: 5px;
    margin-bottom: 10px;
    }

    .product h4 {
    margin: 10px 0;
    font-size: 18px;
    color: #444;
    }

    .product p {
    font-size: 16px;
    color: green;
    margin-bottom: 10px;
    }
    /* Basic Modal Styling */
    .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    }

    .modal-content {
    background: white;
    margin: 15% auto;
    padding: 20px;
    width: 80%;
    max-width: 500px;
    }

    .close {
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    position: absolute;
    top: 10px;
    right: 20px;
    }

    .close:hover,
    .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
    }
</style>

@code {
    private bool isEditModalOpen = false;
    private Class.ProductService.Product productToEdit;

    // Open the modal with the product details pre-filled
    private void OpenEditProductModal(Class.ProductService.Product product)
    {
        productToEdit = new Class.ProductService.Product
            {
                Name = product.Name,
                Price = product.Price,
                ImageUrl = product.ImageUrl,
                IndexValue = product.IndexValue,
                DiscountPrecentage = product.DiscountPrecentage,
                DiscountPrice = product.DiscountPrice
            };
        isEditModalOpen = true;
    }

    // Close the modal
    private void CloseEditModal()
    {
        isEditModalOpen = false;
    }

    // Update the product in the ProductService
    private void UpdateProduct()
    {
        // Update the product in the ProductService
        var index = ProductService.Products.FindIndex(p => p.IndexValue == productToEdit.IndexValue);
        if (index >= 0)
        {
            var editProduct = ProductService.Products[index];
            if (editProduct.DiscountPrecentage > 0)
            {
                productToEdit.DiscountPrice = (int)(productToEdit.Price - (productToEdit.Price * (productToEdit.DiscountPrecentage / 100)));
            }
            ProductService.Products[index] = productToEdit;
        }

        // Close the modal
        CloseEditModal();
    }

    // Delete a product from the list
    private void DeleteProduct(Class.ProductService.Product product)
    {
        // Find and remove the product from the ProductService list
        ProductService.Products.Remove(product);

        // Optionally, you can handle any confirmation or additional steps like refreshing the page or updating UI
    }
}
