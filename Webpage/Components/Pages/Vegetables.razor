@page "/Vegetables"
@inherits LayoutComponentBase
@rendermode InteractiveServer
@inject Class.ProductService ProductService
<div id="movingSentence" class="moving-text">
    OFFER! ONION 1KG JUST ₹10 OFFER!
</div>
<h3>Vegetable Sales Page</h3>

<div class="product-grid">
    @if (ProductService.Products.Any())
    {
        @foreach (var product in ProductService.Products)
        {
            <div class="product">
                <img src="@product.ImageUrl" alt="@product.Name">
                <h4>@product.Name</h4>
                <p>Original price: ₹@product.Price</p>
                <p>Discount price: ₹@product.DiscountPrice</p>
                <div class="quantity">
                    <button @onclick="() => DecreaseQuantity(product)">-</button>
                    <span>@product.Quantity</span>
                    <button @onclick="() => IncreaseQuantity(product)">+</button>
                </div>
                <button @onclick="() => AddToCart(product)" class="add-to-cart">Add to Cart</button>
            </div>
        }
    }
    else
    {
        <p>No products available. Add some products first!</p>
    }
</div>
<!-- Cart Section -->
<div class="cart-section">
    <h3>Your Cart</h3>
    @if (Cart.Count > 0)
    {
        <div class="cart">
            @foreach (var item in Cart)
            {
                
                <div class="cart-item">
                    <div class="quantity1">
                        <button @onclick="() => DecreaseQuantity(item)">-</button>
                        <span>@item.Quantity</span>
                        <button @onclick="() => IncreaseQuantity(item)">+</button>
                    </div>
                    <div class="product">
                    <img src="@item.ImageUrl" alt="@item.Name">
                    </div>
                    <div>
                        <strong>@item.Name</strong>
                        <span>(₹@item.DiscountPrice each)</span>
                       
                    </div>  
                    <div>
                        <span>Quantity: @item.Quantity</span>
                        <span>Total: ₹@(item.DiscountPrice * item.Quantity)</span>
                        <button @onclick="() => RemoveFromCart(item)" class="remove">Remove</button>
                    </div>
                </div>
            }
            <div class="cart-total">
                <h4>Total Items: @Cart.Sum(x => x.Quantity)</h4>
                <h4>Total Price: ₹@Cart.Sum(x => x.DiscountPrice * x.Quantity)</h4>
            </div>
        </div>
    }
    else
    {
        <p>Your cart is empty. Start adding products!</p>
    }
</div>
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f7f7f7;
        color: #333;
        margin: 0;
        padding: 0;
    }

    h3, h4 {
        text-align: center;
        margin: 20px 0;
        color: #444;
    }

    /* Add Product Form Styling */
    .add-product-form {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        margin: 20px auto;
    }

        .add-product-form label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .add-product-form input {
            width: calc(100% - 20px);
            margin-bottom: 15px;
            padding: 8px 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .add-product-form button {
            width: 100%;
            padding: 10px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }

            .add-product-form button:hover {
                background-color: #218838;
            }

    /* Product Grid Styling */
    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        padding: 20px;
    }

    .product {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        text-align: center;
        transition: transform 0.2s ease-in-out;
    }

        .product:hover {
            transform: translateY(-5px);
        }

        .product img {
            max-width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 5px;
            margin-bottom: 10px;
        }

        .product h4 {
            margin: 10px 0;
            font-size: 18px;
            color: #444;
        }

        .product p {
            font-size: 16px;
            color: green;
            margin-bottom: 10px;
        }

    .quantity {
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 1px 0;
    }

    .quantity1 {
        display: flow;
        justify-content: center;
        margin: 10px 0;
    }

    .quantity1 button {
        width: 30px;
        height: 30px;
        border: none;
        background-color: #007bff;
        color: white;
        border-radius: 50%;
        cursor: pointer;
    }

    .quantity1 span {
        margin: 0 10px;
        font-size: 16px;
        font-weight: bold;
    }

        .quantity button {
            width: 30px;
            height: 30px;
            border: none;
            background-color: #007bff;
            color: white;
            border-radius: 50%;
            cursor: pointer;
        }

        .quantity span {
            margin: 0 10px;
            font-size: 16px;
            font-weight: bold;
        }

    .add-to-cart {
        margin-top: 10px;
        padding: 10px;
        background-color: orange;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        font-weight: bold;
        transition: background-color 0.3s ease-in-out;
    }

        .add-to-cart:hover {
            background-color: darkorange;
        }

    /* Cart Section */
    .cart-section {
        padding: 20px;
        background-color: #f1f1f1;
        border-top: 2px solid #ddd;
    }

    .cart {
        max-width: 800px;
        margin: 0 auto;
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .cart-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #ddd;
        padding: 10px 0;
    }

        .cart-item div {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        .cart-item .remove {
            background-color: red;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
        }

            .cart-item .remove:hover {
                background-color: darkred;
            }

    .cart-total {
        margin-top: 20px;
        text-align: right;
        font-weight: bold;
    }

        .cart-total h4 {
            margin: 5px 0;
        }
    <!-- Your style for animation -->
    .moving-text {
        font-size: 30px;
        white-space: nowrap;
        padding: 10px;
        background: linear-gradient(to right, red, orange, yellow); /* Gradient background */
        color: black; /* Text color */
        font-weight: bold;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3); /* Add text shadow */
        text-decoration-thickness: 3px; /* Underline thickness */
        animation: move 10s linear infinite;
        border-radius: 5px; /* Rounded corners */
        padding: 15px; /* Increase padding for better spacing */
        display: inline-block; /* Make the text wrap around as it moves */
    }

    @@keyframes move {
        0%

    {
        transform: translateX(100%);
    }

    100% {
        transform: translateX(0%);
    }

    }
</style>
@code {
    private List<Class.ProductService.Product> Products = new List<Class.ProductService.Product>();
    private List<Class.ProductService.Product> Cart = new List<Class.ProductService.Product>();
    private void IncreaseQuantity(Class.ProductService.Product product)
    {
        product.Quantity++;
    }

    private void DecreaseQuantity(Class.ProductService.Product product)
    {
        if (product.Quantity > 1)
        {
            product.Quantity--;
        }
    }

    private void AddToCart(Class.ProductService.Product product)
    {
        var cartItem = Cart.FirstOrDefault(x => x.Name == product.Name);
        if (cartItem != null)
        {
            cartItem.Quantity = product.Quantity;
        }
        else
        {
            Cart.Add(new Class.ProductService.Product
                {
                    Name = product.Name,
                    Price = product.Price,
                    Quantity = product.Quantity,
                    ImageUrl = product.ImageUrl,
                    DiscountPrice = product.DiscountPrice,
                    DiscountPrecentage = product.DiscountPrecentage
                });
        }
    }
    private void RemoveFromCart(Class.ProductService.Product product)
    {
        Cart.Remove(product);
    }

}
